#include <behaviors/rgbled_widget.dtsi>  // needed to use the behaviors
#include <dt-bindings/led/led.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define TIMEOUT_COMBO_2 175
#define TIMEOUT_COMBO_3 175
#define TIMEOUT_COMBO_4 175
#define TIMEOUT_LAYER_HOLD 200
#define TIMEOUT_STICKY_LEADER_KEY 5000
#define TIMEOUT_HOLD_FN 5000

&sk { release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>; };

&sl { release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>; };

&soft_off {
    hold-time-ms = <TIMEOUT_HOLD_FN>; // Only turn off it the key is held for 5 seconds or longer.
};

#define ARTSEY_BASE_A A
#define ARTSEY_BASE_R R
#define ARTSEY_BASE_T T
#define ARTSEY_BASE_S S
#define ARTSEY_BASE_E E
#define ARTSEY_BASE_Y Y
#define ARTSEY_BASE_I I
#define ARTSEY_BASE_O O
#define ARTSEY_COMBO_N N
#define LAYER_ID_GLOBAL -1
#define LAYER_ID_BASE 0
#define LAYER_ID_NUMBERS 1
#define LAYER_ID_SYMBOLS 2
#define LAYER_ID_PARENTHETICALS 3
#define LAYER_ID_NAVIGATION 4
#define LAYER_ID_BT_SEL 5
#define LAYER_ID_CUSTOM 6
#define LAYER_ID_BIG_SYM 7
#define LAYER_ID_BIG_FUNCTION 8

/ {
    combos {
        compatible = "zmk,combos";

        /*****************************************
		 * 2 key combos
		 *****************************************/
        // Function layer doesn't apply to non-big artsey presently

        combo_enter {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 7>;
            bindings = <&kp ENTER>;
        };

        combo_control {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 0>;
            bindings = <&sk LCTRL>;
        };

        combo_gui {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <6 0>;
            bindings = <&sk LGUI>;
        };

        combo_alt {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <5 0>;
            bindings = <&sk LALT>;
        };

        combo_backspace {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 2>;
            bindings = <&kp BACKSPACE>;
        };

        combo_delete {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <5 2>;
            bindings = <&kp DELETE>;
        };

        combo_shift_lock {
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <2 6>;
            bindings = <&kt LSHFT>;
        };

        combo_b {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 4>;
            bindings = <&kp B>;
        };

        combo_c {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 6>;
            bindings = <&kp C>;
        };

        combo_n {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <5 4>;
            bindings = <&kp ARTSEY_COMBO_N>;
        };

        combo_f {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 2>;
            bindings = <&kp F>;
        };

        combo_g {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <2 1>;
            bindings = <&kp G>;
        };

        combo_u {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <6 5>;
            bindings = <&kp U>;
        };

        combo_h {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 5>;
            bindings = <&kp H>;
        };

        combo_v {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <2 0>;
            bindings = <&kp V>;
        };

        combo_j {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <1 0>;
            bindings = <&kp J>;
        };

        combo_w {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 0>;
            bindings = <&kp W>;
        };

        combo_k {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <6 4>;
            bindings = <&kp K>;
        };

        combo_comma {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 6>;
            bindings = <&kp COMMA>;
        };

        combo_period {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 5>;
            bindings = <&kp PERIOD>;
        };

        combo_slash {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 4>;
            bindings = <&kp SLASH>;
        };

        combo_exclamation {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <1 5>;
            bindings = <&kp EXCL>;
        };

        combo_seven {
            layers = <LAYER_ID_NUMBERS>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <3 2>;
            bindings = <&kp N7>;
        };

        combo_eight {
            layers = <LAYER_ID_NUMBERS>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <2 1>;
            bindings = <&kp N8>;
        };

        combo_nine {
            layers = <LAYER_ID_NUMBERS>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <7 6>;
            bindings = <&kp N9>;
        };

        combo_zero {
            layers = <LAYER_ID_NUMBERS>;
            timeout-ms = <TIMEOUT_COMBO_2>;
            key-positions = <6 5>;
            bindings = <&kp N0>;
        };

        /*****************************************
		 * 3 key combos
		 *****************************************/

        combo_esc {
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <3 2 4>;
            bindings = <&kp ESC>;
        };

        combo_layer_navigation {
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <2 7 5>;
            bindings = <&tog LAYER_ID_NAVIGATION>;
        };

        combo_m {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <6 5 4>;
            bindings = <&kp M>;
        };

        combo_d {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <3 2 1>;
            bindings = <&kp D>;
        };

        combo_p {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <7 5 4>;
            bindings = <&kp P>;
        };

        combo_q {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <3 1 0>;
            bindings = <&kp Q>;
        };

        combo_x {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <2 1 0>;
            bindings = <&kp X>;
        };

        combo_l {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <7 6 5>;
            bindings = <&kp L>;
        };

        combo_single_quote {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_3>;
            key-positions = <3 6 5>;
            bindings = <&kp SQT>;
        };

        /*****************************************
		 * 4 key combos
		 *****************************************/

        combo_tab {
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <3 2 1 4>;
            bindings = <&kp TAB>;
        };

        combo_space {
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <7 6 5 4>;
            bindings = <&kp SPACE>;
        };

        combo_shift {
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <7 2 1 0>;
            bindings = <&sk LSHFT>;
        };

        combo_layer_bt_select {
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <3 7 0 4>;
            bindings = <&tog LAYER_ID_BT_SEL>;
        };

        combo_bt_conn {
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <2 6 1 5>;
            bindings = <&ind_con>;
        };

        combo_z {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <3 2 1 0>;
            bindings = <&kp Z>;
        };

        combo_caps_lock {
            layers = <LAYER_ID_BASE>;
            timeout-ms = <TIMEOUT_COMBO_4>;
            key-positions = <4 5 6 3>;
            bindings = <&kp CAPS>;
        };
    };
};

/ {
    behaviors {
        layer_base_kp: layer_base_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_base_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        layer_numbers_kp: layer_numbers_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_numbers_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        layer_symbols_kp: layer_symbols_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_symbols_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        layer_parentheticals_kp: layer_parentheticals_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_parentheticals_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        layer_custom_kp: layer_custom_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_custom_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        ctrl_alt_kp: ctrl_alt_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "ctrl_alt_kp";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_LAYER_HOLD>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&sk>;
        };

        bt_sel_dconn_0: bt_sel_dconn_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT_SEL_DCONN_0";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_HOLD_FN>;
            flavor = "tap-preferred";
            bindings = <&bt BT_SEL 0>, <&bt BT_DISC 0>;
        };

        bt_sel_dconn_1: bt_sel_dconn_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT_SEL_DCONN_1";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_HOLD_FN>;
            flavor = "tap-preferred";
            bindings = <&bt BT_SEL 1>, <&bt BT_DISC 1>;
        };
        
        bt_sel_dconn_2: bt_sel_dconn_2 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT_SEL_DCONN_2";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_HOLD_FN>;
            flavor = "tap-preferred";
            bindings = <&bt BT_SEL 2>, <&bt BT_DISC 2>;
        };
        
        bt_sel_dconn_3: bt_sel_dconn_3 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT_SEL_DCONN_3";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_HOLD_FN>;
            flavor = "tap-preferred";
            bindings = <&bt BT_SEL 3>, <&bt BT_DISC 3>;
        };

        bt_clr-curr_clr-all: bt_clr-curr_clr-all {
            compatible = "zmk,behavior-hold-tap";
            label = "BT_CLR_CURR_ALL";
            #binding-cells = <2>;
            tapping_term_ms = <TIMEOUT_HOLD_FN>;
            flavor = "tap-preferred";
            bindings = <&bt BT_SEL 0>, <&bt BT_DISC 0>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            label = "ARTSEY";
            bindings = <
  &layer_numbers_kp LAYER_ID_NUMBERS ARTSEY_BASE_S  &kp ARTSEY_BASE_T  &kp ARTSEY_BASE_R  &layer_parentheticals_kp LAYER_ID_PARENTHETICALS ARTSEY_BASE_A
  &layer_custom_kp LAYER_ID_CUSTOM ARTSEY_BASE_O    &kp ARTSEY_BASE_I  &kp ARTSEY_BASE_Y  &layer_symbols_kp LAYER_ID_SYMBOLS ARTSEY_BASE_E
            >;
        };

        numbers {
            label = "Number";
            bindings = <
  &mo LAYER_ID_NUMBERS  &kp N3  &kp N2  &kp N1
  &none                 &kp N6  &kp N5  &kp N4
            >;
        };

        symbols {
            label = "Symbol";
            bindings = <
  &kp GRAVE  &kp SEMI   &kp BSLH   &kp EXCL
  &kp EQUAL  &kp MINUS  &kp QMARK  &mo LAYER_ID_SYMBOLS
            >;
        };

        parentheticals {
            label = "Paren";
            bindings = <
  &kp LBRC  &kp LPAR  &kp RPAR  &mo LAYER_ID_PARENTHETICALS
  &kp RBRC  &kp LBKT  &kp RBKT  &none
            >;
        };

        navigation {
            label = "Nav";
            bindings = <
  &kp PG_UP  &kp HOME  &kp UP    &kp END
  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT
            >;
        };

        bt {
            label = "BT";
            bindings = <
  &bt_sel_dconn_3  &bt_sel_dconn_2        &bt_sel_dconn_1  &bt_sel_dconn_0
  &out OUT_TOG     &bt_clr-curr_clr-allL  &soft_off        &none
            >;
        };

        custom {
            label = "Custom";
            bindings = <
  &ind_bat             &kp C_VOL_UP  &kp INS    &kp C_MUTE
  &mo LAYER_ID_CUSTOM  &kp C_VOL_DN  &kp PSCRN  &sk RSHFT
            >;
        };
    };
};
